# Clean migration for new simple document system
from django.db import migrations, models
import django.db.models.deletion
import documents.models
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('documents', '0003_new_document_system'),
    ]

    operations = [
        # Drop all old tables cleanly
        migrations.RunSQL(
            "DROP TABLE IF EXISTS documents_smartdocument;",
            reverse_sql="-- No reverse operation needed"
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS documents_documentprocessingqueue;", 
            reverse_sql="-- No reverse operation needed"
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS documents_documentfeedback;",
            reverse_sql="-- No reverse operation needed"
        ),
        
        # Create new simple Document model
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Display name for the document', max_length=255, verbose_name='Document Name')),
                ('original_filename', models.CharField(editable=False, max_length=255, verbose_name='Original Filename')),
                ('description', models.TextField(blank=True, help_text='Brief description of the document', verbose_name='Description')),
                ('file', models.FileField(help_text='Upload PDF, DOCX, TXT, MD, JSON, CSV, XLSX, RTF, HTML, PPT, ZIP (Max: 100MB)', upload_to='documents/%Y/%m/', validators=[documents.models.validate_document_file], verbose_name='Document File')),
                ('file_size', models.BigIntegerField(blank=True, null=True, verbose_name='File Size')),
                ('file_type', models.CharField(blank=True, max_length=10, verbose_name='File Type')),
                ('category', models.CharField(blank=True, help_text='Organize documents by category', max_length=100, verbose_name='Category')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for easy searching', max_length=500, verbose_name='Tags')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('ai_metadata', models.JSONField(blank=True, default=dict, help_text='Metadata generated by AI Doc Helper', verbose_name='AI Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Uploaded By')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents', 
                'ordering': ['-created_at'],
            },
        ),
        
        # Create AI Doc Helper Log model
        migrations.CreateModel(
            name='AIDocHelperLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation_type', models.CharField(choices=[('analyze_all', 'Analyze All Documents'), ('organize', 'Organize Documents'), ('suggest_cleanup', 'Suggest Cleanup'), ('metadata_update', 'Update Metadata'), ('duplicate_check', 'Duplicate Check')], max_length=20, verbose_name='Operation Type')),
                ('results', models.JSONField(default=dict, help_text='AI analysis results and recommendations', verbose_name='Results')),
                ('documents_processed', models.IntegerField(default=0, verbose_name='Documents Processed')),
                ('summary', models.TextField(blank=True, help_text='Summary of findings and recommendations', verbose_name='Summary')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('processing_time', models.FloatField(blank=True, null=True, verbose_name='Processing Time')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Requested By')),
            ],
            options={
                'verbose_name': 'AI Doc Helper Log',
                'verbose_name_plural': 'AI Doc Helper Logs',
                'ordering': ['-created_at'],
            },
        ),
    ]