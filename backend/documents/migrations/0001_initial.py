# Generated by Django 5.2.5 on 2025-08-24 02:48

import django.db.models.deletion
import documents.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('chat', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Document UUID')),
                ('name', models.CharField(help_text='Display name for the document', max_length=255, verbose_name='Document Name')),
                ('original_filename', models.CharField(editable=False, max_length=255, verbose_name='Original Filename')),
                ('description', models.TextField(blank=True, help_text='Brief description of the document', verbose_name='Description')),
                ('file', models.FileField(help_text='Upload PDF, DOCX, TXT, MD, JSON, CSV, XLSX, RTF, HTML, PPT, ZIP (Max: 100MB)', upload_to='documents/%Y/%m/', validators=[documents.models.validate_document_file], verbose_name='Document File')),
                ('file_size', models.BigIntegerField(blank=True, null=True, verbose_name='File Size')),
                ('file_type', models.CharField(blank=True, max_length=10, verbose_name='File Type')),
                ('file_hash', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 hash for duplicate detection', max_length=64, verbose_name='File Hash')),
                ('category', models.CharField(blank=True, help_text='Organize documents by category', max_length=100, verbose_name='Category')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for easy searching', max_length=500, verbose_name='Tags')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('extracted_text', models.TextField(blank=True, help_text='Full text extracted from document for knowledge base', verbose_name='Extracted Text')),
                ('ai_summary', models.TextField(blank=True, help_text='AI-generated summary of document content', verbose_name='AI Summary')),
                ('ai_keywords_json', models.TextField(blank=True, default='[]', help_text='AI-extracted keywords and topics (JSON string)', verbose_name='AI Keywords JSON')),
                ('search_vector', models.TextField(blank=True, db_index=True, help_text='Preprocessed text for fast searching', verbose_name='Search Vector')),
                ('chunks_json', models.TextField(blank=True, default='[]', help_text='Text chunks for vector embeddings (JSON array)', verbose_name='Document Chunks JSON')),
                ('embeddings_generated', models.BooleanField(default=False, help_text='Whether vector embeddings have been generated for this document', verbose_name='Embeddings Generated')),
                ('embedding_model', models.CharField(blank=True, help_text='Name of the embedding model used', max_length=100, verbose_name='Embedding Model')),
                ('chunks_count', models.IntegerField(default=0, help_text='Number of text chunks generated', verbose_name='Chunks Count')),
                ('reference_count', models.IntegerField(default=0, help_text='Number of times referenced by LLM', verbose_name='Reference Count')),
                ('last_referenced', models.DateTimeField(blank=True, help_text='Last time this document was used by LLM', null=True, verbose_name='Last Referenced')),
                ('effectiveness_score', models.FloatField(default=0.0, help_text='How useful this document is for answering questions', verbose_name='Effectiveness Score')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Uploaded By')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentationImprovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('conversation_title', models.CharField(blank=True, help_text='Display title for the conversation', max_length=255, verbose_name='Conversation Title')),
                ('issues_detected', models.TextField(blank=True, help_text='Specific issues like account, password, pricing concerns', verbose_name='Issues Detected')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10, verbose_name='Priority')),
                ('langextract_analysis_summary', models.TextField(blank=True, help_text='User-friendly summary of conversation analysis', verbose_name='LangExtract Analysis Summary')),
                ('langextract_full_analysis', models.JSONField(blank=True, default=dict, help_text='Complete analysis data from LangExtract', verbose_name='Full LangExtract Analysis')),
                ('category', models.CharField(blank=True, help_text='Category based on LangExtract analysis', max_length=100, verbose_name='Category')),
                ('satisfaction_level', models.IntegerField(blank=True, choices=[(1, 'Very Dissatisfied'), (2, 'Dissatisfied'), (3, 'Neutral'), (4, 'Satisfied'), (5, 'Very Satisfied')], help_text='Customer satisfaction rating from 1-5', null=True, verbose_name='Satisfaction Level')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('analysis_completed', models.BooleanField(default=False, help_text='Whether LangExtract analysis has been completed', verbose_name='Analysis Completed')),
                ('analysis_error', models.TextField(blank=True, help_text='Error message if analysis failed', verbose_name='Analysis Error')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documentation_improvements', to='chat.conversation', verbose_name='Conversation')),
            ],
            options={
                'verbose_name': 'Doc Improvement',
                'verbose_name_plural': 'Doc Improvements',
                'ordering': ['-created_at'],
            },
        ),
    ]
