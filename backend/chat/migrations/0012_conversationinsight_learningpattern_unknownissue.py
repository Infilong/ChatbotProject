# Generated by Django 5.2.4 on 2025-08-14 00:38

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0011_update_uuid_constraints'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ConversationInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('overall_sentiment', models.CharField(blank=True, choices=[('very_positive', 'Very Positive'), ('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative'), ('very_negative', 'Very Negative')], max_length=20, null=True, verbose_name='Overall Sentiment')),
                ('satisfaction_score', models.FloatField(blank=True, help_text='Customer satisfaction score (1-10)', null=True, verbose_name='Satisfaction Score')),
                ('emotional_indicators', models.JSONField(blank=True, default=list, help_text='List of emotional indicators found in conversation', verbose_name='Emotional Indicators')),
                ('primary_issues', models.JSONField(blank=True, default=list, help_text='Main issues identified in conversation', verbose_name='Primary Issues')),
                ('issue_categories', models.JSONField(blank=True, default=list, help_text='Categories of issues discussed', verbose_name='Issue Categories')),
                ('pain_points', models.JSONField(blank=True, default=list, help_text='Specific pain points mentioned by customer', verbose_name='Pain Points')),
                ('urgency_level', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20, null=True, verbose_name='Urgency Level')),
                ('importance_level', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20, null=True, verbose_name='Importance Level')),
                ('escalation_recommended', models.BooleanField(default=False, verbose_name='Escalation Recommended')),
                ('escalation_reason', models.TextField(blank=True, verbose_name='Escalation Reason')),
                ('resolution_status', models.CharField(blank=True, choices=[('resolved', 'Resolved'), ('partially_resolved', 'Partially Resolved'), ('unresolved', 'Unresolved'), ('escalated', 'Escalated'), ('ongoing', 'Ongoing')], max_length=20, null=True, verbose_name='Resolution Status')),
                ('conversation_quality', models.FloatField(blank=True, help_text='Overall conversation quality score (1-10)', null=True, verbose_name='Conversation Quality')),
                ('customer_segment', models.CharField(blank=True, max_length=50, verbose_name='Customer Segment')),
                ('feature_requests', models.JSONField(blank=True, default=list, verbose_name='Feature Requests')),
                ('churn_risk_indicators', models.JSONField(blank=True, default=list, verbose_name='Churn Risk Indicators')),
                ('upsell_opportunities', models.JSONField(blank=True, default=list, verbose_name='Upsell Opportunities')),
                ('raw_langextract_data', models.JSONField(blank=True, default=dict, help_text='Complete raw analysis data from LangExtract', verbose_name='Raw LangExtract Data')),
                ('analyzed_at', models.DateTimeField(auto_now_add=True, verbose_name='Analyzed At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('analysis_version', models.CharField(default='1.0', max_length=20, verbose_name='Analysis Version')),
                ('conversation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='insight', to='chat.conversation', verbose_name='Conversation')),
            ],
            options={
                'verbose_name': 'Conversation Insight',
                'verbose_name_plural': 'Conversation Insights',
                'ordering': ['-analyzed_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('pattern_type', models.CharField(choices=[('knowledge_gap', 'Knowledge Gap'), ('user_behavior', 'User Behavior Pattern'), ('conversation_flow', 'Conversation Flow Pattern'), ('resolution_pattern', 'Resolution Pattern'), ('escalation_trigger', 'Escalation Trigger'), ('unknown_intent', 'Unknown Intent'), ('performance_issue', 'Performance Issue')], max_length=30, verbose_name='Pattern Type')),
                ('title', models.CharField(max_length=200, verbose_name='Pattern Title')),
                ('description', models.TextField(verbose_name='Pattern Description')),
                ('pattern_data', models.JSONField(blank=True, default=dict, help_text='Structured data about the identified pattern', verbose_name='Pattern Data')),
                ('frequency_count', models.IntegerField(default=1, help_text='Number of times this pattern has been observed', verbose_name='Frequency Count')),
                ('confidence_score', models.FloatField(blank=True, help_text='Confidence in pattern identification (0-1)', null=True, verbose_name='Confidence Score')),
                ('first_observed', models.DateTimeField(auto_now_add=True, verbose_name='First Observed')),
                ('last_observed', models.DateTimeField(auto_now=True, verbose_name='Last Observed')),
                ('priority_level', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical Priority')], default='medium', max_length=20, verbose_name='Priority Level')),
                ('status', models.CharField(choices=[('identified', 'Identified'), ('under_review', 'Under Review'), ('in_progress', 'In Progress'), ('implemented', 'Implemented'), ('rejected', 'Rejected')], default='identified', max_length=20, verbose_name='Status')),
                ('improvement_suggestions', models.JSONField(blank=True, default=list, verbose_name='Improvement Suggestions')),
                ('implementation_notes', models.TextField(blank=True, verbose_name='Implementation Notes')),
                ('implemented_at', models.DateTimeField(blank=True, null=True, verbose_name='Implemented At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_patterns', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_patterns', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('source_conversations', models.ManyToManyField(blank=True, related_name='learning_patterns', to='chat.conversation', verbose_name='Source Conversations')),
            ],
            options={
                'verbose_name': 'Learning Pattern',
                'verbose_name_plural': 'Learning Patterns',
                'ordering': ['-priority_level', '-frequency_count', '-last_observed'],
            },
        ),
        migrations.CreateModel(
            name='UnknownIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('category', models.CharField(choices=[('knowledge_gap', 'Knowledge Gap'), ('technical_limitation', 'Technical Limitation'), ('unclear_intent', 'Unclear User Intent'), ('complex_query', 'Complex Query'), ('new_use_case', 'New Use Case'), ('integration_need', 'Integration Need'), ('policy_gap', 'Policy Gap')], max_length=30, verbose_name='Issue Category')),
                ('user_query', models.TextField(help_text='The original user question or request', verbose_name='User Query')),
                ('bot_response', models.TextField(help_text='How the bot responded', verbose_name='Bot Response')),
                ('issue_description', models.TextField(help_text='Description of why this was problematic', verbose_name='Issue Description')),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='Additional context about the issue', verbose_name='Context Data')),
                ('suggested_improvements', models.JSONField(blank=True, default=list, verbose_name='Suggested Improvements')),
                ('resolution_status', models.CharField(choices=[('pending', 'Pending'), ('training_needed', 'Training Needed'), ('documentation_needed', 'Documentation Needed'), ('system_improvement', 'System Improvement'), ('resolved', 'Resolved'), ('wont_fix', "Won't Fix")], default='pending', max_length=30, verbose_name='Resolution Status')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Resolution Notes')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resolved At')),
                ('priority_score', models.FloatField(default=1.0, help_text='Calculated priority score based on frequency and impact', verbose_name='Priority Score')),
                ('frequency_count', models.IntegerField(default=1, help_text='Number of times this type of issue has occurred', verbose_name='Frequency Count')),
                ('identified_at', models.DateTimeField(auto_now_add=True, verbose_name='Identified At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unknown_issues', to='chat.conversation', verbose_name='Conversation')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_issues', to=settings.AUTH_USER_MODEL, verbose_name='Resolved By')),
            ],
            options={
                'verbose_name': 'Unknown Issue',
                'verbose_name_plural': 'Unknown Issues',
                'ordering': ['-priority_score', '-frequency_count', '-identified_at'],
            },
        ),
    ]
